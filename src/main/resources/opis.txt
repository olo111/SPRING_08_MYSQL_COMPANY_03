#1
1.
  jpa:
    show-sql: true
a w main mamy:
2.
      Employee2 employee21 = new Employee2("Main1", "Kowalski", 3000.0);
        Employee2 employee2 = new Employee2("Main2", "Zalewska", 4000.0);
        employeeRepository.save(employee21);
        employeeRepository.save(employee2);
3. tworzymy w msql bazedanych :company

niestety nie utworzy się employee bo nie jest utworzona tabela employe w company 
musimy użyć spring.jpa.hibernate.ddl-auto czyli w pliku application.yml dodajemy zapis :
		  jpa:
    show-sql: true
    hibernate:
        ddl-auto: create-drop  

UWAGA spacje i tab mają znaczenie

te logi w consoli swiadczą że powstało pierwsze employee2 z main
Hibernate: insert into employee2 (first_name, last_name, salary) values (?, ?, ?)
Hibernate: insert into employee2 (first_name, last_name, salary) values (?, ?, ?)

=====================================================================================================================
teraz tworzymy plik schema.sql

CREATE TABLE IF NOT EXISTS employee2(
id BIGINT AUTO_INCREMENT PRIMARY KEY,
first_name VARCHAR(255),
last_name VARCHAR(255),
salary DOUBLE
    );
z tym że tworzymy w nim tabelę czyli CREATE TABLE IF NOT EXIST  employee2 

ale  w pliku application.yml należy dopisać :

  jpa:
    show-sql: true
  sql:
    init:
      mode: always

uwaga teraz tabela nie będzie zniszczona po utworzeniu aplikacji 




1.	  najpierw jest wykonywany plik schema.sql  - > tworzenie tabeli 
2.	pozniej wykonywany jest plik data.sql	    -> dodanie danych
3.       na końcu wykonywany jest Main		    -> dodanie danych do tabeli

=====================================================================================================================

podejście mieszane to 
	1.  ale  w pliku application.yml należy dopisać :

    jpa:
    show-sql: true
    hibernate:
      ddl-auto: create-drop
    defer-datasource-initialization: true
  sql:
    init:
      mode: always


1.	  najpierw jest wykonywany plik schema.sql  - > tworzenie tabeli i danych 
2.	pozniej wykonywany jest plik data.sql	    -> dodanie danych do tabeli
3.       na końcu wykonywany jest Main		    -> dodanie danych do tabeli

=====================================================================================

wycięto z supplier.html po /header.

<!--<div class="container text-center">-->
<!--    <div><h1> SUPPLIERS  List</h1></div>-->
<!--    <div>-->
<!--        <table class="table table-bordered"  border="1">-->

<!--            <thead class="thead-dark">-->
<!--            <tr class="bg-primary">-->
<!--                <th>ID </th>-->
<!--                <th>Name  </th>-->
<!--                <th>id_Sap  </th>-->
<!--                <th>classification  </th>-->
<!--                <th>totalScore  </th>-->
<!--            </tr>-->
<!--            </thead>-->
<!--        <tbody>-->
<!--        <th:block th:each="supplier : ${listSuppliers}">-->
<!--        <tr>-->
<!--            <td class="bg-success">[[${supplier.id}]]</td>-->
<!--            <td class="bg-primary">-->
<!--                <a th:href="@{'/suppliers/show/'+${supplier.id_Sap}}" >[[${supplier.name}]]</a>&nbsp;-->
<!--            </td>-->
<!--&lt;!&ndash;            <td><a th:href="@{'/suppliers/show/'+${supplier.id_Sap}}"></a>[[${supplier.name}]]</td>&ndash;&gt;-->
<!--            <td  class="bg-info">[[${supplier.id_Sap}]]</td>-->
<!--            <td class="bg-danger"> [[${supplier.classification}]]</td>-->
<!--            <td class="bg-warning">[[${supplier.totalScore}]]</td>-->
<!--        </tr>-->
<!--        </th:block>-->
<!--        </tbody>-->
<!--        </table>-->

<!--    </div>-->

<!--</div>-->
============================================================================================================
uwaga - PROBLEM Z KOLOROWANIE 3 PRZEDZIAŁÓW W THYMELEAF I CSS -poniższe linii otwierają oczy na te elementy

https://stackoverflow.com/questions/45251624/thymeleaf-how-to-make-table-with-different-colors-->
<!--                    <td th:text="${data.riskIndex}" th:styleappend="'background-color: ' +
${T(web.utils.DataRepresentationUtils).convertRiskIndexToRGBLiteral(data.riskIndex)} + ';'"></td>-->
                    <td th:text="${supplier.totalScore}" th:class="${supplier.totalScore gt 90} ?
                    'above-avg' : (${supplier.totalScore gt 80} ? 'just-avg' : 'below-avg')"></td>
https://community.looker.com/lookml-5/conditional-formatting-of-color-or-images-within-table-cells-using-html-278

PROBLEM Z KOLOROWANIEM KOMOREK W TABELI KOMPONENTOW DLA DOSTAWCY ALE JUZ TO PEEKŁO
ROZWIAZANIE:  ADRESY
<!-- TERAZ JEST POPRAWNA JEZELI CHODZI O TABELE DLA COMPONENTÓW DLA DOSTAWCY -->
<link rel="stylesheet" href="../static/style.css" th:href="@{../../style.css}">
22052022
utworzyć w service metodą która utworzy listę lub coś na kształt kontenera
z wszystkimi objekatmi SupplierDto -= to samo co w efekcie daje metoda repoSupplier.findAll
Nie jest to dobra droga nie wprowadza nic pozytywnego
aktualinie należy sprawdzić różnice w zapisie Controller i Rest Controller i odniesieniach do punktów i do pliku
być może to kontroler odsyła do pliku a RestControler tylko do punktu krancowegpo

